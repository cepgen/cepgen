find_package(PkgConfig)
pkg_check_modules(PC_CepGen QUIET CepGen)

set(CEPGEN_PATHS $ENV{CEPGEN_PATH} ${CEPGEN_PATH})
set(CepGen_VERSION @CepGen_VERSION@)

find_path(CepGen_INCLUDE_DIR
    NAMES CepGen/Generator.h
    PATHS ${PC_CepGen_INCLUDE_DIRS} ${CEPGEN_PATHS}
    PATH_SUFFIXES include)
find_path(CepGen_DATA_DIR
    NAMES mstw_sf_scan_nnlo.dat
    PATHS ${PC_CepGen_INCLUDE_DIRS} ${CEPGEN_PATHS}
    PATH_SUFFIXES share External)
find_library(CepGen_LIBRARY
    NAMES CepGen
    PATHS ${PC_CepGen_LIBRARY_DIRS} ${CEPGEN_PATHS}
    PATH_SUFFIXES lib64 lib build)

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(CepGen
    FOUND_VAR CepGen_FOUND
    REQUIRED_VARS CepGen_LIBRARY CepGen_INCLUDE_DIR
    VERSION_VAR CepGen_VERSION)

if(CepGen_FOUND)
    set(CepGen_LIBRARIES ${CepGen_LIBRARY})
    set(CepGen_INCLUDE_DIRS ${CepGen_INCLUDE_DIR})
    set(CepGen_DATA_DIRS ${CepGen_DATA_DIR})
    set(CepGen_DEFINITIONS ${PC_CepGen_CFLAGS_OTHER})
    if(NOT TARGET CepGen::CepGen)
        add_library(CepGen::CepGen UNKNOWN IMPORTED)
        set_target_properties(CepGen::CepGen PROPERTIES
            IMPORTED_LOCATION "${CepGen_LIBRARY}"
            INTERFACE_COMPILE_OPTIONS "${PC_CepGen_CFLAGS_OTHER}"
            INTERFACE_INCLUDE_DIRECTORIES "${CepGen_INCLUDE_DIR}")
    endif()@CEPGEN_EXTRA_LIBRARIES@
else()
    message(STATUS "CepGen path was not found. Did you set the $CEPGEN_PATH environment variable?")
endif()

mark_as_advanced(CepGen_INCLUDE_DIR CepGen_LIBRARY)

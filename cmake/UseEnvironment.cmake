if(CMAKE_VERSION VERSION_GREATER 3.1)
  set(CMAKE_CXX_STANDARD 14)
  set(CMAKE_C_STANDARD 11)
else()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11")
endif()
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O")
set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -Wall -cpp")
#--- check if we are at CERN
if($ENV{HOSTNAME} MATCHES "^lxplus[0-9]+.cern.ch")
  set(IS_LXPLUS "yes")
endif()
set(LXPLUS_SRC_ENV "source ${CMAKE_SOURCE_DIR}/source-lxplus.sh")
#--- ensure a proper version of the compiler is found
if(CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.8)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -pedantic-errors -g")
else()
  message(STATUS "clang or gcc above 4.8 is required")
  if(IS_LXPLUS)
    message(STATUS "Compiling on LXPLUS. Did you properly source the environment variables? E.g.\n\n\t${LXPLUS_SRC_ENV}\n")
  endif()
  message(FATAL_ERROR "Please clean up this build environment, i.e.\n\trm -rf CMake*\nand try again...")
endif()
#--- set the default paths for external dependencies
if(IS_LXPLUS)
  list(APPEND CMAKE_PREFIX_PATH "$ENV{CVMFS_DIR}/external/CMake/2.8.9/Linux-i386/share/cmake-2.8/Modules")
  set(PYTHON_LIBRARY "$ENV{PYTHONHOME}/lib/libpython2.7.so")
  set(PYTHON_EXECUTABLE "$ENV{PYTHONHOME}/bin/python")
  set(PYTHON_INCLUDE_DIR "$ENV{PYTHONHOME}/include/python2.7")

  message(STATUS "Compiling on LXPLUS. Do not forget to source the environment variables!")
  message(STATUS "e.g. `${LXPLUS_SRC_ENV}`")
endif()
#--- searching for GSL
find_library(GSL_LIB gsl HINTS $ENV{GSL_DIR} PATH_SUFFIXES lib)
find_library(GSL_CBLAS_LIB gslcblas HINTS $ENV{GSL_DIR} PATH_SUFFIXES lib)
find_path(GSL_INCLUDE gsl HINTS $ENV{GSL_DIR} PATH_SUFFIXES include)
if(NOT GSL_LIB OR NOT GSL_CBLAS_LIB)
  message(FATAL_ERROR "GSL with CBLAS bindings was not found!")
else()
  message(STATUS "GSL found in ${GSL_LIB}")
  message(STATUS "GSL CBLAS found in ${GSL_CBLAS_LIB}")
endif()
include_directories(${GSL_INCLUDE})
#--- searching for ROOT
find_package(ROOT QUIET)
if(ROOT_FOUND)
  if(${ROOT_VERSION} LESS 6.21)
    set(ROOT_CXX_STANDARD 14)
  else()
    set(ROOT_CXX_STANDARD 17)
  endif()
endif()

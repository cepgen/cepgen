/*
 *  CepGen: a central exclusive processes event generator
 *  Copyright (C) 2013-2021  Laurent Forthomme
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "CepGen/Generator.h"

#include "CepGen/Physics/GluonGrid.h"
#include "CepGen/Modules/StructureFunctionsFactory.h"
#include "CepGen/StructureFunctions/Parameterisation.h"

#include "CepGen/Core/Exception.h"
#include "CepGen/Utils/ArgumentsParser.h"

#include "Canvas.h"
#include "TGraph2D.h"

using namespace std;

int main(int argc, char* argv[]) {
  int grid_id, member;

  cepgen::ArgumentsParser(argc, argv)
      .addArgument("grid,g", "grid to display (1=KMR, 2=MSTW, 31=Shamov sigma, 32=Shamov gm)", &grid_id)
      .addOptionalArgument("member,m", "member to display", &member, 0)
      .parse();

  TGraph* gr_scan_1d = nullptr;
  TGraph2D* gr_scan_2d = nullptr;

  cepgen::Generator gen;

  switch (grid_id) {
    case 1: {
      auto grid = kmr::GluonGrid::get().grid();
    } break;
    case 2: {
      auto sf_mstw = cepgen::strfun::StructureFunctionsFactory::get().build((int)cepgen::strfun::Type::Partonic);
      auto grid = sf_mstw.grid();
    } break;
    case 31:
    case 32: {
      auto sf_shamov = cepgen::strfun::StructureFunctionsFactory::get().build((int)cepgen::strfun::Type::Shamov);
    } break;
  }

  {
    cepgen::Canvas c("grid_display");
    gStyle->SetPalette(kBeach);
    if (gr_scan_1d) {
      gr_scan_1d->Draw("ap");
      c.Prettify(gr_scan_1d->GetHistogram());
    }
    if (gr_scan_2d) {
      gr_scan_2d->Draw("colz");
      c.Prettify((TH1D*)gr_scan_2d->GetHistogram());
    }
    c.Save("pdf");
  }

  return 0;
}

include_directories(${PROJECT_SOURCE_DIR})

file(GLOB core_sources Core/*.cpp Modules/*.cpp Utils/*.cpp *.cpp)
file(GLOB phys_sources Physics/*.cpp)
file(GLOB int_sources Integration/*.cpp)
file(GLOB proc_sources Processes/*.cpp Processes/Fortran/*.f)
file(GLOB sf_sources StructureFunctions/*.cpp)

set(core_definitions)
set(core_includes)

#----- check the external dependencies for SFs/alphaS

if(GRV_SRC)
  message(STATUS "GRV PDFset found in ${GRV_SRC}!")
  list(APPEND sf_sources ${GRV_SRC})
else()
  message(STATUS "GRV PDFset not found. Will not build Szczurek-Uleshchenko SFs")
  file(GLOB su_sf StructureFunctions/SzczurekUleshchenko.cpp)
  list(REMOVE_ITEM sf_sources ${su_sf})
endif()
if(LHAPDF)
  message(STATUS "LHAPDF found in ${LHAPDF}")
  list(APPEND CEPGEN_CORE_EXT ${LHAPDF})
  list(APPEND core_includes ${LHAPDF_INCLUDE})
else()
  file(GLOB partonic_sf StructureFunctions/Partonic.cpp)
  list(REMOVE_ITEM sf_sources ${partonic_sf})
  file(GLOB lhapdf_alphas Physics/AlphaSLHAPDF.cpp)
  list(REMOVE_ITEM phys_sources ${lhapdf_alphas})
endif()
if(ALPHAS_SRC)
  message(STATUS "alphaS evolution algorithm found in ${ALPHAS_SRC}")
  list(APPEND phys_sources ${ALPHAS_SRC})
else()
  file(GLOB pegasus_alphas Physics/AlphaSPEGASUS.cpp)
  file(REMOVE_ITEM phys_sources ${pegasus_alphas})
endif()
if(APFEL)
  message(STATUS "APFEL found in ${APFEL}")
  list(APPEND core_includes ${APFEL_INCLUDE})
  list(APPEND CEPGEN_CORE_EXT ${APFEL})
else()
  file(GLOB apfel_alphas Physics/AlphaSAPFEL.cpp)
  list(REMOVE_ITEM phys_sources ${apfel_alphas})
endif()

#----- check the external dependencies for physics utilities

if(CMAKE_BUILD_FOAM AND ROOT_FOUND)
  message(STATUS "FOAM integrator will be built")
  list(APPEND core_includes ${ROOT_INCLUDE_DIRS})
  list(APPEND CEPGEN_COR_EXT ${ROOT_LIBRARIES})
else()
  file(GLOB int_foam Integration/IntegratorFoam.cpp)
  list(REMOVE_ITEM int_sources ${int_foam})
endif()
if(KMR_INTERP)
  message(STATUS "KMR interpolation algorithm found in ${KMR_INTERP}")
  list(APPEND phys_sources ${KMR_INTERP})
endif()

if(MUPARSER)
  message(STATUS "Formulas parsing will use muParser found in ${MUPARSER}")
  list(APPEND CEPGEN_CORE_EXT ${MUPARSER})
  set(CEPGEN_HAS_FUNCTIONALS ON PARENT_SCOPE)
else()
  file(GLOB func_muparser Utils/FunctionalMuParser.cpp)
  list(REMOVE_ITEM core_sources ${func_muparser})
endif()

if(EXPRTK)
  message(STATUS "Formulas parsing will use exprtk found in ${EXPRTK}")
  list(APPEND core_includes ${EXPRTK}) # header-only
  set(CEPGEN_HAS_FUNCTIONALS ON PARENT_SCOPE)
else()
  file(GLOB func_exprtk Utils/FunctionalExprTk.cpp)
  list(REMOVE_ITEM core_sources ${func_exprtk})
endif()

if(ROOT_FOUND)
  message(STATUS "Formulas parsing will use ROOT")
  list(APPEND core_definitions ${ROOT_DEFINITIONS})
  list(APPEND core_includes ${ROOT_INCLUDE_DIRS})
  list(APPEND CEPGEN_CORE_EXT ${ROOT_LIBRARIES})
  set(CEPGEN_HAS_FUNCTIONALS ON PARENT_SCOPE)
  set(CEPGEN_ROOT_FUNCTIONALS ON PARENT_SCOPE)
else()
  file(GLOB func_root Utils/FunctionalROOT.cpp)
  list(REMOVE_ITEM core_sources ${func_root})
endif()

#----- build the objects

add_library(CepGenCore SHARED ${core_sources} ${int_sources} ${phys_sources} ${proc_sources} ${sf_sources})
target_compile_definitions(CepGenCore PUBLIC ${core_definitions})
target_link_libraries(CepGenCore PUBLIC ${CEPGEN_CORE_EXT})
target_include_directories(CepGenCore PUBLIC ${core_includes})
if(CEPGEN_ROOT_FUNCTIONALS)
  set_property(TARGET CepGenCore PROPERTY CXX_STANDARD 14)
  #set_target_properties(CepGenCore PROPERTIES COMPILE_FLAGS ${ROOT_CXX_FLAGS})
  #target_compile_options(CepGenCore PRIVATE ${ROOT_CXX_FLAGS})
endif()

#----- installation rules

install(TARGETS CepGenCore DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT lib)

